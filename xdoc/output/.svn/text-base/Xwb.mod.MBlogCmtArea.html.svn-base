<div xmlns:ext="http://www.extjs.com" class="body-wrap"><div class="inheritance res-block"><pre class="res-block-inner"><a href="output/Xwb.ui.Base.html" ext:member="" ext:cls="Xwb.ui.Base">Base</a>&#13;&nbsp;&nbsp;<img src="resources/elbow-end.gif"><a href="output/Xwb.mod.CommentArea.html" ext:member="" ext:cls="Xwb.mod.CommentArea">CommentArea</a>&#13;&nbsp;&nbsp;&nbsp;&nbsp;<img src="resources/elbow-end.gif">MBlogCmtArea</pre></div><h1>类 <a href="source/std-doc.html#cls-Xwb.mod.MBlogCmtArea">Xwb.mod.MBlogCmtArea</a></h1><table cellspacing="0"><tr><td class="label">空间：</td><td class="hd-info">Xwb.mod</td></tr><tr><td class="label">定义在:</td><td class="hd-info">std-doc.js</td></tr><tr><td class="label">类:</td><td class="hd-info"><a href="source/std-doc.html#cls-Xwb.mod.MBlogCmtArea">MBlogCmtArea</a></td></tr><tr><td class="label">父类:</td><td class="hd-info"><a href="output/Xwb.mod.CommentArea.html" ext:cls="Xwb.mod.CommentArea" ext:member="">CommentArea</a></td></tr></table><div class="description">具体微博的评论区域</div><div class="hr"></div><a id="Xwb.mod.MBlogCmtArea-configs"></a><h2>配置项</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">config</th><th class="msource-header">定义在</th></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-closeable"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-closeable">closeable</a></b> : Boolean<div class="mdesc">指示控件是否可关闭，可关闭的控件上存在一个<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-clsNode" ext:member="clsNode" ext:cls="Xwb.ui.Base">clsNode</a>结点，
当点击该元素时关闭控件，这过程由控件实现。</div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-titleNode"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-titleNode">titleNode</a></b> : String<div class="mdesc">标题结点选择器，如果控件存在“标题”，
调用<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-setTitle" ext:member="setTitle" ext:cls="Xwb.ui.Base">setTitle</a>方法时会用标题结点选择器获得标题结点，
并在该结点上打印标题。默认值为"#xwb_title"</div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-clsNode"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-clsNode">clsNode</a></b> : String<div class="mdesc">用该选择器查找关闭事件触发结点。默认值为"#xwb_cls"</div></td><td class="msource">Base</td></tr><tr class="config-row expandable 继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-onViewReady"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-onViewReady">onViewReady</a></b> : Function<div class="mdesc"><div class="short">这是个接口方法，当控件html元素生成后回调该接口，参数传递控件html元素。&#13;
{&#13;
        onViewReady : function(viewElement){&#13;
            alert(viewEleme...</div><div class="long">这是个接口方法，当控件html元素生成后回调该接口，参数传递控件html元素。
<pre><code>{
        onViewReady : <b>function</b>(viewElement){
            alert(viewElement.tagName);
        }
    }</code></pre></div></div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-title"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-title">title</a></b> : String<div class="mdesc">存在标题值时，控件初始化时会调用<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-setTitle" ext:member="setTitle" ext:cls="Xwb.ui.Base">setTitle</a>方法输出标题</div></td><td class="msource">Base</td></tr><tr class="config-row expandable 继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-view"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-view">view</a></b> : String|HTMLElement|HtmlTemplate<div class="mdesc"><div class="short">指定控件生成html视图的模板，它可以是一段HTML字符串，也可以是HTML模板名称，也可为一个html元素。&#13;
如果view来自字符串模板，将调用Xwb.util.Tpl.parse方法解析模板。&#13;
如果未指定tplData数据，将...</div><div class="long">指定控件生成html视图的模板，它可以是一段HTML字符串，也可以是HTML模板名称，也可为一个html元素。<br/>
如果view来自字符串模板，将调用<a href="output/Xwb.util.Tpl.parse.html" ext:cls="Xwb.util.Tpl.parse">Xwb.util.Tpl.parse</a>方法解析模板。<br/>
如果未指定<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-tplData" ext:member="tplData" ext:cls="Xwb.ui.Base">tplData</a>数据，将控件自身数据作为模板解析的key->value数据。</div></div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-actionMgr"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-actionMgr">actionMgr</a></b> : Boolean<div class="mdesc">指示是否启用<a href="output/Xwb.ax.ActionMgr.html" ext:cls="Xwb.ax.ActionMgr">Xwb.ax.ActionMgr</a>动作处理，
初始化后actionMgr属性指向实例化的<a href="output/Xwb.ax.ActionMgr.html" ext:cls="Xwb.ax.ActionMgr">Xwb.ax.ActionMgr</a>类实例。</div></td><td class="msource">Base</td></tr><tr class="config-row expandable 继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-onactiontrig"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-onactiontrig">onactiontrig</a></b> : Function<div class="mdesc"><div class="short">接口方法，开始actionMgr后，可实现该接口统一处理来自actionMgr实例的各种动作&#13;
{&#13;
        actionMgr : true,&#13;
        onactiontrig : function(act){&#13;
...</div><div class="long">接口方法，开始<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-actionMgr" ext:member="actionMgr" ext:cls="Xwb.ui.Base">actionMgr</a>后，可实现该接口统一处理来自<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-actionMgr" ext:member="actionMgr" ext:cls="Xwb.ui.Base">actionMgr</a>实例的各种动作
<pre><code>{
        actionMgr : true,
        onactiontrig : <b>function</b>(act){
            <b>switch</b>(act.data.e){
                <b>case</b> <em>'sd'</em> :
                <i>// <b>do</b> something</i>
                <b>break</b>;
                <i>// ...</i>
            }
        }
    }</code></pre></div></div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-destroyOnClose"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-destroyOnClose">destroyOnClose</a></b> : Boolean<div class="mdesc">当关闭控件时，
是否销毁(<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-destroy" ext:member="destroy" ext:cls="Xwb.ui.Base">destroy</a>)控件，否则只隐藏控件。默认值false，只隐藏。</div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-onclose"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-onclose">onclose</a></b> : Function<div class="mdesc">接口方法，关闭控件(<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-close" ext:member="close" ext:cls="Xwb.ui.Base">close</a>)时，将回调该方法，如果方法返回false值取消关闭</div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-contexted"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-contexted">contexted</a></b> : Boolean<div class="mdesc">指示控件显示后是否具有“内外切换”类菜单的效果。“内外切换”即点击控件内部区域时一切正常，但点击非控件区域时就关闭控件。</div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-hidden"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-hidden">hidden</a></b> : Boolean<div class="mdesc">初始化时是否显示控件，默认显示</div></td><td class="msource">Base</td></tr><tr class="config-row expandable 继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-autoRender"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-autoRender">autoRender</a></b> : Boolean<div class="mdesc"><div class="short">指示是否在类初始化时生成视图元素，默认false，按需才生成。&#13;
如果该项为false，即控件在初始化后，并未立即生成视图结点，触发onViewReady回调，&#13;
而是直至直接或间接调用getView方法后生成，即按需时才生成HTML...</div><div class="long">指示是否在类初始化时生成视图元素，默认false，按需才生成。<br/>
如果该项为false，即控件在初始化后，并未立即生成视图结点，触发<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-onViewReady" ext:member="onViewReady" ext:cls="Xwb.ui.Base">onViewReady</a>回调，
而是直至直接或间接调用<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-getView" ext:member="getView" ext:cls="Xwb.ui.Base">getView</a>方法后生成，即按需时才生成HTML视图。<br/>
如果未生成视图结点，<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-onViewReady" ext:member="onViewReady" ext:cls="Xwb.ui.Base">onViewReady</a>方法是不会触发的，
但有时候需要提前生成，此时就可以设置该项为true，即在初始化时就生成HTML视图，
从而触发<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-onViewReady" ext:member="onViewReady" ext:cls="Xwb.ui.Base">onViewReady</a>。</div></div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-tplData"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-tplData">tplData</a></b> : Object<div class="mdesc">默认控件的模板数据来自控件自身，也可以通过该属性重定义模板数据</div></td><td class="msource">Base</td></tr><tr class="config-row expandable 继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-beforeShow"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-beforeShow">beforeShow</a></b> : Function<div class="mdesc"><div class="short">接口方法，在控件显示前回调，如果子类实现该方法，请确保调用回父类方法。&#13;
回调方法时，视图状态已是 visibility:'hidden', display:true，所以如果视图已在DOM上，控件在DOM流上占位，&#13;
可以正确获得控...</div><div class="long">接口方法，在控件显示前回调，如果子类实现该方法，请确保调用回父类方法。<br/>
回调方法时，视图状态已是 visibility:'hidden', display:true，所以如果视图已在DOM上，控件在DOM流上占位，
可以正确获得控件宽高和位置等等信息。</div></div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-afterShow"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-afterShow">afterShow</a></b> : Function<div class="mdesc">接口方法，控件显示后回调，如果子类实现该方法，请确保调用回父类方法</div></td><td class="msource">Base</td></tr><tr class="config-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-beforeHide"></a><b><a href="source/std-doc.html#cfg-Xwb.ui.Base-beforeHide">beforeHide</a></b> : Function<div class="mdesc">接口方法，控件隐藏前回调，如果子类实现该方法，请确保调用回父类方法</div></td><td class="msource">Base</td></tr></tbody></table><a id="Xwb.mod.MBlogCmtArea-props"></a><h2>公共属性（只读）</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">properties</th><th class="msource-header">定义在</th></tr><tr class="property-row  继承自"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-cacheId"></a><b><a href="source/std-doc.html#prop-Xwb.ui.Base-cacheId">cacheId</a></b> : String<div class="mdesc">控件全局唯一ID</div></td><td class="msource">Base</td></tr></tbody></table><a id="Xwb.mod.MBlogCmtArea-events"></a><h2>事件列表</h2><div class="no-members">This class has no public events.</div><a id="Xwb.mod.MBlogCmtArea-methods"></a><h2>公共方法</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">method</th><th class="msource-header">定义在</th></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-setCloseable"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-setCloseable">setCloseable</a></b>(&nbsp;<code>Boolean&nbsp;closable</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">设置是否可关闭</div><div class="long">设置是否可关闭<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>closable</code> : Boolean<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#setCloseable" ext:member="#setCloseable" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-close"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-close">close</a></b>()
    :
                                        void<div class="mdesc"><div class="short">关闭控件，关闭前触发onclose回调，如果开始destroyOnClose，关闭后销毁(destroy)该控件</div><div class="long">关闭控件，关闭前触发<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-onclose" ext:member="onclose" ext:cls="Xwb.ui.Base">onclose</a>回调，如果开始<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-destroyOnClose" ext:member="destroyOnClose" ext:cls="Xwb.ui.Base">destroyOnClose</a>，关闭后销毁(<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-destroy" ext:member="destroy" ext:cls="Xwb.ui.Base">destroy</a>)该控件<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#close" ext:member="#close" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-setTitle"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-setTitle">setTitle</a></b>(&nbsp;<code>String&nbsp;title</code>&nbsp;)
    :
                                        this<div class="mdesc"><div class="short">设置控件标题。&#13;
查找标题所在结点参见titleNode配置。</div><div class="long">设置控件标题。
查找标题所在结点参见<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-titleNode" ext:member="titleNode" ext:cls="Xwb.ui.Base">titleNode</a>配置。<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>title</code> : String<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li><code>this</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#setTitle" ext:member="#setTitle" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-getView"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-getView">getView</a></b>()
    :
                                        HTMLElement<div class="mdesc"><div class="short">获得窗口视图DOM结点，如果结点未创建，立即创建并返回结点，创建后触发onViewReady接口回调。&#13;
子类不能重写该方法。</div><div class="long">获得窗口视图DOM结点，如果结点未创建，立即创建并返回结点，创建后触发<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-onViewReady" ext:member="onViewReady" ext:cls="Xwb.ui.Base">onViewReady</a>接口回调。
子类不能重写该方法。<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>HTMLElement</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#getView" ext:member="#getView" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-jqExtra"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-jqExtra">jqExtra</a></b>(&nbsp;<code>Array&nbsp;args</code>&nbsp;)
    :
                                        this<div class="mdesc"><div class="short">以通用JavaScript变量命名风格生成ID元素对应的jq对象。&#13;
如 
this.jqExtra('inputor', 'title');&#13;
     alert( this.jqInputor );&#13;
     alert( t...</div><div class="long">以通用JavaScript变量命名风格生成ID元素对应的jq对象。
如 
<pre><code>this.jqExtra(<em>'inputor'</em>, <em>'title'</em>);
     alert( this.jqInputor );
     alert( this.jqTitle );</code></pre><div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>args</code> : Array<div class="sub-desc">参数列表，它并不是一个数组，而是可变参数列表，如 jqExtra('a','b','c',...)</div></li></ul><strong>Returns:</strong><ul><li><code>this</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#jqExtra" ext:member="#jqExtra" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-display"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-display">display</a></b>(&nbsp;<code>Object&nbsp;show</code>&nbsp;)
    :
                                        this<div class="mdesc"><div class="short">显示/隐藏或获得UI的显示或隐藏属性</div><div class="long">显示/隐藏或获得UI的显示或隐藏属性<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>show</code> : Object<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li><code>this</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#display" ext:member="#display" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-appendAt"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-appendAt">appendAt</a></b>(&nbsp;<code>jQuery&nbsp;jQuery对象</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">控件视图追加到在指定jQuery对象中</div><div class="long">控件视图追加到在指定jQuery对象中<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>jQuery对象</code> : jQuery<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#appendAt" ext:member="#appendAt" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-ancestorOf"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-ancestorOf">ancestorOf</a></b>(&nbsp;<code>Xwb.ui.Base|HTMLElement&nbsp;target</code>,&nbsp;<code>Number&nbsp;[depth]</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">是否包含某元素</div><div class="long">是否包含某元素<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>target</code> : Xwb.ui.Base|HTMLElement<div class="sub-desc"></div></li><li><code>[depth]</code> : Number<div class="sub-desc">搜索深度</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#ancestorOf" ext:member="#ancestorOf" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-jq"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-jq">jq</a></b>(&nbsp;<code>jQuery&nbsp;selector</code>&nbsp;)
    :
                                        jQuery<div class="mdesc"><div class="short">获得控件或控件子元素的jQuery对象</div><div class="long">获得控件或控件子元素的jQuery对象<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>selector</code> : jQuery<div class="sub-desc">jQuery选择器，未设置时返回控件视图的jQuery对象</div></li></ul><strong>Returns:</strong><ul><li><code>jQuery</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#jq" ext:member="#jq" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-destroy"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-destroy">destroy</a></b>()
    :
                                        void<div class="mdesc"><div class="short">销毁控件，将视图从DOM上移除</div><div class="long">销毁控件，将视图从DOM上移除<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#destroy" ext:member="#destroy" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-domEvent"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-domEvent">domEvent</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Function&nbsp;handler</code>,&nbsp;<code>String|HTMLElement&nbsp;[childElementToBind]</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">添加DOM事件处理，大部份事件可直接调用jQuery方法处理，但mousedown是例外的，如果想监听mousedown事件，请调用本方法进行绑定。&#13;
为什么mousedown事件是例外的？参见Xwb.ax.contextMgr</div><div class="long">添加DOM事件处理，大部份事件可直接调用jQuery方法处理，但mousedown是例外的，如果想监听mousedown事件，请调用本方法进行绑定。<br/>
为什么mousedown事件是例外的？参见<a href="output/Xwb.ax.contextMgr.html" ext:cls="Xwb.ax.contextMgr">Xwb.ax.contextMgr</a><div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc"></div></li><li><code>handler</code> : Function<div class="sub-desc"></div></li><li><code>[childElementToBind]</code> : String|HTMLElement<div class="sub-desc">如果指定该项，事件将绑定到该项元素上</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#domEvent" ext:member="#domEvent" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-unDomEvent"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-unDomEvent">unDomEvent</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Function&nbsp;handler</code>,&nbsp;<code>String|HTMLElement&nbsp;[childElementToBind]</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">移除由domEvent绑定的事件</div><div class="long">移除由<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-domEvent" ext:member="domEvent" ext:cls="Xwb.ui.Base">domEvent</a>绑定的事件<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc"></div></li><li><code>handler</code> : Function<div class="sub-desc"></div></li><li><code>[childElementToBind]</code> : String|HTMLElement<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#unDomEvent" ext:member="#unDomEvent" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-setContexted"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-setContexted">setContexted</a></b>()
    :
                                        Xwb.ui.Base<div class="mdesc"><div class="short">添加上下文切换效果,当点击控件区域以外的地方时隐藏控件。</div><div class="long">添加上下文切换效果,当点击控件区域以外的地方时隐藏控件。<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Xwb.ui.Base</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#setContexted" ext:member="#setContexted" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-templ"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-templ">templ</a></b>(&nbsp;<code>Object&nbsp;childSelectorHtmlMap</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">批量对子元素应用innerHTML</div><div class="long">批量对子元素应用innerHTML<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>childSelectorHtmlMap</code> : Object<div class="sub-desc">结点为{childSelector:strHtml}
<pre><code><b>var</b> data = {
                <em>'#text_a'</em>:<em>'字符串A'</em>,
                <em>'#text_b'</em>:<em>'字符串B'</em>,
                <em>'#text_c'</em>:<em>'字符串C'</em>
            };</code></pre></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#templ" ext:member="#templ" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-offsetsTo"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-offsetsTo">offsetsTo</a></b>(&nbsp;<code>DOMElement|jQuery&nbsp;offsetToTarget</code>&nbsp;)
    :
                                        [offsetX,<div class="mdesc"><div class="short">得到相对位移</div><div class="long">得到相对位移<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>offsetToTarget</code> : DOMElement|jQuery<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li><code>[offsetX,</code><div class="sub-desc">offsetY]</div></li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#offsetsTo" ext:member="#offsetsTo" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-anchor"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-anchor">anchor</a></b>(&nbsp;<code>HTMLElement|jQuery&nbsp;anchorElement</code>,&nbsp;<code>String&nbsp;direction</code>,&nbsp;<code>Function&nbsp;[prehandler]</code>,&nbsp;<code>Boolean&nbsp;[restrictIntoView]</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">定位控件到指定元素边沿。&#13;
定位方位分为上，中，下，左，右，用字母分别表达t,c,b,l,r。&#13;
计算顺序为：上中下&#13;
// 将控件定位于元素的上方并居中&#13;
            component.anchor(anchorEle...</div><div class="long">定位控件到指定元素边沿。<br/>
定位方位分为上，中，下，左，右，用字母分别表达t,c,b,l,r。<br/>
计算顺序为：上中下
<pre><code><i>// 将控件定位于元素的上方并居中</i>
            component.anchor(anchorElement, <em>'lc'</em>);</code></pre>
例子可参见demo/anchor.html<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>anchorElement</code> : HTMLElement|jQuery<div class="sub-desc">作为锚点的元素</div></li><li><code>direction</code> : String<div class="sub-desc">对齐方向，上下，左右与中间的结合，上下：t,b；左右l,r，中间c</div></li><li><code>[prehandler]</code> : Function<div class="sub-desc">计算出对齐数据后至应用数据前可通过该方法对数据进行二次处理</div></li><li><code>[restrictIntoView]</code> : Boolean<div class="sub-desc">如果控件超出可视区域，是否调整到可视区域内</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#anchor" ext:member="#anchor" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-center"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-center">center</a></b>()
    :
                                        void<div class="mdesc"><div class="short">控件相对当前文档视图居中</div><div class="long">控件相对当前文档视图居中<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#center" ext:member="#center" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-clip"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-clip">clip</a></b>()
    :
                                        void<div class="mdesc"><div class="short">控件视图从当前DOM父元素脱离，外包一层DIV元素，绝对定位置于document.body层，但控件的位置长度保持不变。&#13;
控件视图只能在外包DIV层内活动，DIV层display:hidden，所以超出DIV层控件视图部份将被剪切。...</div><div class="long">控件视图从当前DOM父元素脱离，外包一层DIV元素，绝对定位置于document.body层，但控件的位置长度保持不变。<br/>
控件视图只能在外包DIV层内活动，DIV层display:hidden，所以超出DIV层控件视图部份将被剪切。<br/>
该函数主要作用是，方便相对外包DIV层内控制控件的位置，使得控件滑动时具有剪切效果。<br/>
为防闪烁，调用函数前可先设置view的visiblity属性为隐藏(hidden)，<br/>
style.display为显示，调用后view外层元素的visiblity属性是隐藏(hidden)的。<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#clip" ext:member="#clip" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-unclip"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-unclip">unclip</a></b>()
    :
                                        void<div class="mdesc"><div class="short">恢复clip前控件状态</div><div class="long">恢复<a href="output/Xwb.ui.Base.html#Xwb.ui.Base-clip" ext:member="clip" ext:cls="Xwb.ui.Base">clip</a>前控件状态<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#unclip" ext:member="#unclip" ext:cls="Xwb.ui.Base">Base</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Xwb.ui.Base-slide"></a><b><a href="source/std-doc.html#method-Xwb.ui.Base-slide">slide</a></b>(&nbsp;<code>String&nbsp;fromTo</code>,&nbsp;<code>Boolean&nbsp;visible</code>,&nbsp;<code>Function&nbsp;[callback]</code>,&nbsp;<code>Object&nbsp;[props]</code>,&nbsp;<code>Object&nbsp;[duration]</code>,&nbsp;<code>Function&nbsp;[easing]</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">滑动显示或隐藏。&#13;
如果是隐藏，调用前要设置控件的visiblity:hidden,display:NOT HIDDEN样式。</div><div class="long">滑动显示或隐藏。<br/>
如果是隐藏，调用前要设置控件的visiblity:hidden,display:NOT HIDDEN样式。<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>fromTo</code> : String<div class="sub-desc">l,r,t,b|l,r,t,b，两位字母表示</div></li><li><code>visible</code> : Boolean<div class="sub-desc">显示或隐藏</div></li><li><code>[callback]</code> : Function<div class="sub-desc"></div></li><li><code>[props]</code> : Object<div class="sub-desc">jquery动画配置</div></li><li><code>[duration]</code> : Object<div class="sub-desc"></div></li><li><code>[easing]</code> : Function<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Xwb.ui.Base.html#slide" ext:member="#slide" ext:cls="Xwb.ui.Base">Base</a></td></tr></tbody></table></div>